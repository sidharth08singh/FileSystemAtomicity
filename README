#########################################################
REQUIREMENTS
#########################################################
1) Ubuntu
2) GCC


#########################################################
INSTALLATION
#########################################################

step0 : Change to $HOME directory : cd ~
step1 : Copy the FileSystemAtomicity.tar.gz to $HOME directory on your machine 
step2 : Untar the directory : tar -xvzf FileSystemAtomicity.tar.gz 
step3 : Change to source directory : cd FileSystemAtomicity/
step3 : make clean
step4 : make 

Note: The source code is also checked into git. (git clone github.com/sidharth08singh/FileSystemAtomicity.git)
Note: If cloning from git, make sure that the directory is copied to $HOME directory. 

Caution: This project uses a dummy filesystem directory which is packaged inside the project directory above. For program to work correctly, the source code must be placed and untar-ed in the $HOME directory on a Linux Machine with GCC. 


#########################################################
RUNNING THE PROJECT
#########################################################

step 1: cd ~/FileSystemAtomicity (change to Project Directory, if not there)
step 2: Run the executable : ./project 

step 3: An option menu will appear. Select among option 1 to 13. 
	The list of available options are: 
	
	1. Create a New File
	2. List All Files
	3. Read from File
	4. Write to File
	5. Faulty Write 1 (Abort before commit)
	6. Faulty Write 2 (Abort after commit)
	7. Multithreaded Write (Two threads write to the same file simultaneously)
	8. MultiThreaded Write ('n' threads write to the same file simultaneously)
	9. Multithreaded Write & Read(Two threads write to and read from the same file simultaneously)
	10. Recovery after system crash during Write
	11. Sytem Recovery : Check Journal Log, Identify Conflicts, Ask user to Resolve
	12. Delete a File
	13. Exit

step 4: Chose any option. Enter whenever user-prompt appears. 

#########################################################
Points to Note
#########################################################

1) Files are used as an abstraction of sectors in this project. All operations on a file are automatically 
   recreated on three logical sectors of a file (sectors are implemented as files suffixed with _sector2 and
   _sector 3). 

2) For this project, the dummy filesystem directory is created upon installation. All files are created in this 
   directory - $HOME/AOS_Project/dummy_filesystem. 

3) Whenever, a file is created, say - testfile.txt, this application creates two more files to emulate three sector 
   storage of actual disks. The other two logical sectors are called: testfile.txt_sector2 and testfile.txt_sector3. 

4) All operations are implemented atomically - all or nothing atomicity.  

5) All operations are implemented in separate files. The header files associated with each file can be found in the same
   directory $HOME/AOS_Project/dummy_filesystem. 

6) While writing new data to a file, user must write on the application console. As of the "!wq" (without quotes) is
   used as delimiter to terminate writing to the console. 

########################################################
To Do
########################################################

Add recovery mechanism. 
Check Journal Log for how many writes to sectors have successfully gone through even when commit hasn't happened. 
If write has successfully gone through only on one sector -> prompt the user to resolve the conflict manually. 
Apply locks to faultywrite3 to enale multithreading. 


########################################################
1953  git add . 
 1954  git commit -a -m "recovery logic added"
 1955  git push
########################################################
	
